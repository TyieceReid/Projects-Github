import random
from datetime import datetime
# === Base Classes ===
# Represents a general person (base class for both Patient and Doctor)
class Person:
    def __init__(self, name, age, gender, dob):
        self.name = name
        self.age = age
        self.gender = gender
        self.dob = dob

    # Displays personal details
    def display_info(self):
        print(f"Name: {self.name}, Age: {self.age}, Gender: {self.gender}, DOB: {self.dob.strftime('%Y-%m-%d')}")

# Represents a patient in the hospital system
class Patient(Person):
    def __init__(self, pid, name, age, gender, dob):
        super().__init__(name, age, gender, dob)
        self.pid = pid
        self.apptlist = []  # List of appointment objects

    # Displays the patient profile and upcoming appointments
    def view_profile(self):
        print(f"\nPatient ID: {self.pid}")
        self.display_info()
        if self.apptlist:
            print("Upcoming Appointments:")
            for appt in self.apptlist:
                print(f" - {appt.aid} on {appt.date} at {appt.time}")
        else:
            print("No upcoming appointments.")

# Represents a doctor in the hospital system
class Doctor(Person):
    def __init__(self, did, name, age, gender, specialty, schedule, dob):
        super().__init__(name, age, gender, dob)
        self.did = did
        self.specialty = specialty
        self.schedule = schedule  # List of available datetime slots

    # Checks if the doctor is available at the given datetime
    def is_available(self, dt):
        return dt in self.schedule

    # Displays the doctorâ€™s schedule
    def view_schedule(self):
        print(f"\nDoctor ID: {self.did}, Name: {self.name}, Specialty: {self.specialty}")
        print("Available Slots:")
        for slot in self.schedule:
            print(f" - {slot}")
# Represents an appointment between a patient and a doctor
class Appointment:
    def __init__(self, aid, patient, doctor, date, time):
        self.aid = aid
        self.patient = patient
        self.doctor = doctor
        self.date = date
        self.time = time
# === Main System ===

# Manages all hospital operations including registration, appointments, and billing
class HospitalSystem:
    def __init__(self):
        self.patients = {}
        self.doctors = {}
        self.appointments = {}

    # Adds a patient to the hospital system
    def add_patient(self, patient):
        self.patients[patient.pid] = patient

    # Adds a doctor to the hospital system
    def add_doctor(self, doctor):
        self.doctors[doctor.did] = doctor

    # Books a new appointment and updates patient and doctor data
    def book_appointment(self, appointment):
        self.appointments[appointment.aid] = appointment
        appointment.patient.apptlist.append(appointment)

        # Remove the booked time from the doctor's schedule
        dt = f"{appointment.date} {appointment.time}"
        if dt in appointment.doctor.schedule:
            appointment.doctor.schedule.remove(dt)

    # Allows users to cancel or edit an existing appointment
    def manage_appointment(self, appointment_id):
        if appointment_id not in self.appointments:
            print("Appointment not found.")
            return

        appt = self.appointments[appointment_id]
        print(f"\nCurrent Appointment Details:\nDoctor: {appt.doctor.name}\nPatient: {appt.patient.name}\nDate: {appt.date} {appt.time}")

        choice = input("Do you want to cancel or edit this appointment? (cancel/edit): ").strip().lower()

        if choice == "cancel":
            # Restore the time slot to the doctor's schedule
            dt = f"{appt.date} {appt.time}"
            appt.doctor.schedule.append(dt)
            appt.doctor.schedule.sort()

            appt.patient.apptlist.remove(appt)
            del self.appointments[appointment_id]
            print("Appointment cancelled successfully.")

        elif choice == "edit":
            new_date = input("Enter new date (YYYY-MM-DD): ")
            new_time = input("Enter new time (HH:MM): ")
            new_dt = f"{new_date} {new_time}"

            if appt.doctor.is_available(new_dt):
                # Restore old time slot
                old_dt = f"{appt.date} {appt.time}"
                appt.doctor.schedule.append(old_dt)

                # Remove new time slot
                appt.doctor.schedule.remove(new_dt)

                # Update appointment
                appt.date = new_date
                appt.time = new_time
                print("Appointment updated successfully.")
            else:
                print("Doctor is not available at that time.")
        else:
            print("Invalid choice.")
    # Generates a bill for a patient, including optional services and discounts
    def generate_bill(self, patient):
        try:
            base_fee = 3000
            services = []
            total_services_cost = 0.0
            discount_labels = []  # Track discount reasons
            #gid = generate_id("BILL")
            # Add optional services
            while True:
                add_service = input("Add additional service? (yes/no): ").strip().lower()
                if add_service != "yes":
                    break

                service_name = input("Enter service name: ").strip()
                try:
                    service_cost = float(input(f"Enter cost for {service_name} (JMD$): "))
                    services.append((service_name, service_cost))
                    total_services_cost += service_cost
                except ValueError:
                    print("Invalid cost entered. Skipping this service.")

            subtotal = base_fee + total_services_cost
            discount = 0.0

            # Spend-based discount
            if subtotal > 9500:
                discount += 0.10  # 10%
                discount_labels.append("10% High-Spending Discount")

            # Insurance-based discount
            insurance = ""
            while insurance not in ["yes", "no"]:
                insurance = input("Does the patient has insurance? (yes/no): ").strip().lower()
            if insurance == "yes":
                discount += 0.20  # 20%
                discount_labels.append("20% Insurance Discount")

            discount_amount = subtotal * discount
            total_due = subtotal - discount_amount
            gid = generate_id("RECICPT-")
            # Bill output
            print("\n--- Receipt: Kingston Public Hospital ---")
            print(f"Patient: {patient.pid}-{patient.name}")
            print(f"Base Consultation Fee: JMD${base_fee}")
            for name, cost in services:
                print(f"{name}: JMD${cost:.2f}")
            print(f"Subtotal: JMD${subtotal:.2f}")
            if discount_labels:
                print(f"Discounts Applied ({int(discount * 100)}%):")
                for label in discount_labels:
                    print(f" - {label}")
            else:
                print("No discounts applied.")
            print(f"Total Discount: JMD${discount_amount:.2f}")
            print(f"Total Due: JMD${total_due:.2f}")
            print(f"{gid}")
            print("------------------------------------------\n")
        except Exception as e:
            print(f"An error occurred while generating the bill: {e}")

# Generates a unique ID for a patient, doctor,appointment and Receipt
def generate_id(prefix):
    return prefix + str(random.randint(1000, 9999))

# Calculates age based on date of birth
def calculate_age(dob):
    today = datetime.today()
    return today.year - dob.year - ((today.month, today.day) < (dob.month, dob.day))
    
# Initialize hospital system
hospital = HospitalSystem()
# Main menu
while True:
    print("\n\n===        WELCOME TO         ===")
    print("=== KINGSTON PUBLIC HOSPITAL  ===")
    print("\n=== HOSPITAL MANAGEMENT SYSTEM ===")
    print("1. New Patient")
    print("2  New Doctor")
    print("3. Book Appointment")
    print("4. Cancel/Edit Appointment")
    print("5. View Patient Profile")
    print("6. View Doctor Schedule")
    print("7. Generate Bill")
    print("8. Exit")
    print("==================================")
    choice = input("Enter your choice (1-8): ")

    if choice == "1":
        #Register New Patient
        try:
            name = input("Enter patient name: ")
            while True:
                dob_str = input("Enter date of birth (YYYY-MM-DD): ")
                try:
                    dob = datetime.strptime(dob_str, "%Y-%m-%d")
                    today = datetime.today()
                    age = today.year - dob.year - ((today.month, today.day) < (dob.month, dob.day))
                    if age <= 0 or age > 120:
                        print("The age entered is invalid. At Kingston Public Hospital, we only treat patients aged 1 to 120..")
                        continue
                    break
                except ValueError:
                    print("Invalid date format. Use YYYY-MM-DD.")
            gender = input("Enter gender: ")
            pid = generate_id("PAT")
            patient = Patient(pid, name, age, gender, dob)
            hospital.add_patient(patient)
            print(f"Patient was successfully registered with ID: {pid}")
        except Exception as e:
            print(f"Error: {e}")

    elif choice == "2":
        #Register New Doctor
        try:
            name = input("Enter doctor name: ")
            while True:
                dob_str = input("Enter date of birth (YYYY-MM-DD): ")
                try:
                    dob = datetime.strptime(dob_str, "%Y-%m-%d")
                    today = datetime.today()
                    age = today.year - dob.year - ((today.month, today.day) < (dob.month, dob.day))
                    if age <= 22 or age > 65:
                        print("The age entered is invalid. Please provide an age within the acceptable range set by the Ministry of Health of Jamaica, which is between 22 and 65 years for doctors to be registered.")
                        continue
                    break
                except ValueError:
                    print("Invalid date format. Use YYYY-MM-DD.")
            gender = input("Enter gender: ")
            specialty = input("Enter specialty: ")
            schedule = input("Enter available slots (comma-separated, e.g., 2025-06-20 10:00): ").split(",")
            did = generate_id("DOC")
            doctor = Doctor(did, name, age, gender, specialty, [s.strip() for s in schedule], dob)
            hospital.add_doctor(doctor)
            print(f"Doctor was registered with ID: {did}")
        except Exception as e:
            print(f"Error: {e}")

    elif choice == "3":
        #Book Appointment
        pid = input("Enter Patient ID: ")
        did = input("Enter Doctor ID: ")
        date = input("Enter date (YYYY-MM-DD): ")
        time = input("Enter time (HH:MM): ")
        dt = f"{date} {time}"
        if pid in hospital.patients and did in hospital.doctors:
            doctor = hospital.doctors[did]
            if doctor.is_available(dt):
                aid = generate_id("APP")
                appt = Appointment(aid, hospital.patients[pid], doctor, date, time)
                hospital.book_appointment(appt)
                print(f"Appointment booked successfully! ID: {aid}")
            else:
                print("Doctor not available at that time.")
        else:
            print("Invalid patient or doctor ID.")

    elif choice == "4":
        #Edit or Cancel Appointment
        aid = input("Enter Appointment ID to manage: ")
        hospital.manage_appointment(aid)

    elif choice == "5":
        #View Patient Profile
        pid = input("Enter Patient ID: ")
        if pid in hospital.patients:
            hospital.patients[pid].view_profile()
        else:
            print("Patient not found.")

    elif choice == "6":
        #View Schedule For Doctor
        did = input("Enter Doctor ID: ")
        if did in hospital.doctors:
            hospital.doctors[did].view_schedule()
        else:
            print("Doctor not found.")

    elif choice == "7":
        #Generating Bill For Patient
        pid = input("Enter Patient ID: ")
        if pid in hospital.patients:
           hospital.generate_bill(patient)
        else:
          print("Patient not found.")

    elif choice == "8":
        #Exit Program
        print("Powering Down System. Goodbye!")
        break

    else:
        print("Invalid choice. Please select between 1â€“8.")
