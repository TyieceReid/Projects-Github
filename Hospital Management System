import random  # Import random module to generate random IDs

# Person Class (Base class for both Doctor and Patient)
class Person:
    def __init__(self, full_name, age, gender):
        self.full_name = full_name
        self.age = age
        self.gender = gender

    # Display personal information
    def display_info(self):
        print(f"full_name: {self.full_name}, Age: {self.age}, Gender: {self.gender}")

# Doctor Class inherits from Person
class Doctor(Person):
    def __init__(self, doctor_id, full_name, age, gender, specialty, schedule):
        super().__init__(full_name, age, gender)
        self.doctor_id = doctor_id
        self.specialty = specialty
        self.schedule = schedule  # List of available date/time slots

    # Check if doctor is available at a specific time
    def is_available(self, date_time):
        return date_time in self.schedule

    # Display doctor's schedule
    def view_schedule(self):
        print(f"This is Doctor {self.full_name} - Specialty: {self.specialty}")
        print("Please see available slots:")
        for slot in self.schedule:
            print(f"- {slot}")

# Patient Class inherits from Person
class Patient(Person):
    def __init__(self, patid, full_name, age, gender):
        super().__init__(full_name, age, gender)
        self.patid = patid
        self.apptlist = []  # List to store patient's appointments

    # Add an appointment to patient's appointment list
    def book_appointment(self, appointment):
        self.apptlist.append(appointment)

    # View patient details and upcoming appointments
    def view_profile(self):
        self.display_info()
        print(f"This is Patient ID: {self.patid}")
        print(f"The upcoming appointments are: {[appt.appointment_id for appt in self.apptlist]}")

# Appointment Class represents a booking between a patient and a doctor
class Appointment:
    def __init__(self, appointment_id, patient, doctor, date, time):
        self.appointment_id = appointment_id
        self.patient = patient
        self.doctor = doctor
        self.date = date
        self.time = time
        self.status = "Confirmed"

    def confirm(self):
        self.status = "Confirmed"

    def cancel(self):
        self.status = "Cancelled"

# Main system to manage hospital operations
class HospitalSystem:
    def __init__(self):
        self.patients = {}      # Dictionary of Patient objects
        self.doctors = {}       # Dictionary of Doctor objects
        self.appointments = []  # List of all Appointment objects

    # Add a new patient
    def add_patient(self, patient):
        self.patients[patient.patid] = patient

    # Add a new doctor
    def add_doctor(self, doctor):
        self.doctors[doctor.doctor_id] = doctor

    # Book an appointment and update doctor schedule and patient list
    def book_appointment(self, appointment):
        self.appointments.append(appointment)
        appointment.patient.book_appointment(appointment)
        appointment.doctor.schedule.remove(f"{appointment.date} {appointment.time}")

    # Cancel an appointment by ID
    def cancel_appointment(self, appointment_id):
        for appt in self.appointments:
            if appt.appointment_id == appointment_id:
                appt.cancel()
                return appt
        return None

    # Generate a billing receipt for the patient
    def generate_bill(self, patient, extra_fees):
        base_fee = 3000  # Default consultation fee
        total = base_fee + extra_fees
        print("\n--- Receipt: Kingston Public Hospital ---")
        print(f"Patient: {patient.full_name} | ID: {patient.patid}")
        print(f"Consultation Fee: JMD$ {base_fee}")
        print(f"The additional Services: JMD$ {extra_fees}")
        print(f"Total cost: JMD$ {total}")
        print("-------------------------------\n")

# Function to generate unique IDs with prefix
def generate_id(prefix):
    return prefix + str(random.randint(1000, 9999))

# Initialize hospital system
hospital = HospitalSystem()

# Main program loop
while True:
    # Display menu options
    print("\n\n\n===   WELCOME TO         ===")
    print("=== KINGSTON PUBLIC HOSPITAL  ===\n")
    print("\n=== HOSPITAL MANAGEMENT SYSTEM ===")
    print("1. Register New Patient")
    print("2. Add New Doctor")
    print("3. Book Appointment")
    print("4. Cancel Appointment")
    print("5. View Patient Profile")
    print("6. View Doctor Schedule")
    print("7. Generate Bill")
    print("8. View All Doctor Schedules")
    print("9. Exit")
    print("==================================")

    choice = input("Enter your choice (1-9): ")

    # Register a new patient
    if choice == "1":
        try:
            full_name = input("Enter patient full_name: ")
            age = int(input("Enter age: "))
            gender = input("Enter gender: ")
            pid = generate_id("P")
            patient = Patient(pid, full_name, age, gender)
            hospital.add_patient(patient)
            print(f"Patient registered was successfully added")
            print(f"Patient registered with ID: {pid}")
        except ValueError:
            print("Invalid age. Please enter a number.")

    # Add a new doctor
    elif choice == "2":
        try:
            full_name = input("Enter doctor full_name: ")
            age = int(input("Enter age: "))
            gender = input("Enter gender: ")
            specialty = input("Enter specialty: ")
            schedule = input("Enter available slots (comma-separated, e.g., 2025-06-20 10:00): ").split(",")
            did = generate_id("D")
            doctor = Doctor(did, full_name, age, gender, specialty, [s.strip() for s in schedule])
            hospital.add_doctor(doctor)
            print(f"Doctor registered was successfully added")
            print(f"Doctor registered with ID: {did}")
        except ValueError:
            print("Invalid input. Please try again.")

    # Book an appointment
    elif choice == "3":
        pid = input("Enter Patient ID: ")
        did = input("Enter Doctor ID: ")
        date = input("Enter date (YYYY-MM-DD): ")
        time = input("Enter time (HH:MM): ")
        dt = f"{date} {time}"

        if pid in hospital.patients and did in hospital.doctors:
            doctor = hospital.doctors[did]
            if doctor.is_available(dt):
                aid = generate_id("A")
                appt = Appointment(aid, hospital.patients[pid], doctor, date, time)
                hospital.book_appointment(appt)
                print(f"Appointment booked successfully! ID: {aid}")
            else:
                print("Doctor not available at that time.")
        else:
            print("Invalid patient or doctor ID.")

    # Cancel an appointment
    elif choice == "4":
        aid = input("Enter Appointment ID to cancel: ")
        cancelled = hospital.cancel_appointment(aid)
        if cancelled:
            print("Appointment cancelled.")
        else:
            print("Appointment not found.")

    # View patient profile
    elif choice == "5":
        pid = input("Enter Patient ID: ")
        if pid in hospital.patients:
            hospital.patients[pid].view_profile()
        else:
            print("Patient not found.")

    # View a specific doctor's schedule
    elif choice == "6":
        did = input("Enter Doctor ID: ")
        if did in hospital.doctors:
            hospital.doctors[did].view_schedule()
        else:
            print("Doctor not found.")

    # Generate a bill for a patient
    elif choice == "7":
        pid = input("Enter Patient ID: ")
        if pid in hospital.patients:
            try:
                extra = float(input("Enter additional service fees (JMD$): "))
                hospital.generate_bill(hospital.patients[pid], extra)
            except ValueError:
                print("Invalid fee amount.")
        else:
            print("Patient not found.")

    # View all registered doctors' schedules
    elif choice == "8":
        if hospital.doctors:
            for doctor in hospital.doctors.values():
                doctor.view_schedule()
        else:
            print("No doctors registered.")

    # Exit the system
    elif choice == "9":
        print("Exiting system. Goodbye!")
        break

    # Handle invalid menu options
    else:
        print("Invalid choice. Please select between 1â€“9.")

